{"ast":null,"code":"import { DELETE_POST, SET_POSTS, LOADING_DATA, SET_GOAL } from '../types';\nconst initialState = {\n  posts: [],\n  post: {},\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case DELETE_POST:\n      let index = state.Posts.findIndex(post => post.postId === action.payload);\n      state.Posts.splice(index, 1);\n      return { ...state\n      };\n\n    case SET_POSTS:\n      return { ...state,\n        posts: action.payload,\n        loading: false\n      };\n\n    case LOADING_DATA:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/csamu/Desktop/commentwars/src/redux/reducers/dataReducer.js"],"names":["DELETE_POST","SET_POSTS","LOADING_DATA","SET_GOAL","initialState","posts","post","loading","state","action","type","index","Posts","findIndex","postId","payload","splice"],"mappings":"AAAA,SACIA,WADJ,EAEIC,SAFJ,EAGIC,YAHJ,EAIIC,QAJJ,QAKS,UALT;AAOE,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,WAAL;AACA,UAAIW,KAAK,GAAGH,KAAK,CAACI,KAAN,CAAYC,SAAZ,CACTP,IAAD,IAAUA,IAAI,CAACQ,MAAL,KAAgBL,MAAM,CAACM,OADvB,CAAZ;AAGAP,MAAAA,KAAK,CAACI,KAAN,CAAYI,MAAZ,CAAmBL,KAAnB,EAA0B,CAA1B;AAEA,aAAO,EACL,GAAGH;AADE,OAAP;;AAGA,SAAKP,SAAL;AACI,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,KAAK,EAAEI,MAAM,CAACM,OAFT;AAGLR,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKJ,SAAKL,YAAL;AACI,aAAO,EACH,GAAGM,KADA;AAEHD,QAAAA,OAAO,EAAC;AAFL,OAAP;;AAIN;AACE,aAAOC,KAAP;AAtBJ;AAwBD","sourcesContent":["import {\r\n    DELETE_POST,\r\n    SET_POSTS,\r\n    LOADING_DATA,\r\n    SET_GOAL\r\n  } from '../types';\r\n  \r\n  const initialState = {\r\n    posts: [],\r\n    post: {},\r\n    loading: false\r\n  };\r\n  \r\n  export default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case DELETE_POST:\r\n        let index = state.Posts.findIndex(\r\n          (post) => post.postId === action.payload\r\n        );\r\n        state.Posts.splice(index, 1);\r\n\r\n        return {\r\n          ...state\r\n        };\r\n        case SET_POSTS:\r\n            return {\r\n              ...state,\r\n              posts: action.payload,\r\n              loading: false\r\n            };\r\n        case LOADING_DATA:\r\n            return {\r\n                ...state,\r\n                loading:true\r\n            }\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  "]},"metadata":{},"sourceType":"module"}