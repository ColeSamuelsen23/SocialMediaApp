{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\csamu\\\\Desktop\\\\commentwars\\\\src\\\\components\\\\PostResponse.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles'; // MUI Stuff\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography'; // Redux stuff\n\nimport { connect } from 'react-redux';\nimport { postResponse } from '../redux/actions/dataActions';\nconst styles = {\n  submitButton: {\n    position: 'relative',\n    float: 'right',\n    marginTop: 10\n  },\n  progressSpinner: {\n    position: 'absolute'\n  },\n  closeButton: {\n    position: 'absolute',\n    left: '91%',\n    top: '6%'\n  }\n};\n\nclass PostScream extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false,\n      body: '',\n      errors: {}\n    };\n\n    this.handleOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false,\n        errors: {}\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.props.postResponse({\n        body: this.state.body\n      });\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.UI.errors) {\n      this.setState({\n        errors: nextProps.UI.errors\n      });\n    }\n\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\n      this.setState({\n        body: '',\n        open: false,\n        errors: {}\n      });\n    }\n  }\n\n  render() {\n    const {\n      errors\n    } = this.state;\n    const {\n      UI: {\n        loading\n      }\n    } = this.props;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleOpen,\n      tip: \"Post a Comment!\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"COMMENT\"), React.createElement(AddCircleOutlineIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), React.createElement(Dialog, {\n      open: this.state.open,\n      onClose: this.handleClose,\n      fullWidth: true,\n      maxWidth: \"sm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      tip: \"Close\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(DialogTitle, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Post a new response\"), React.createElement(DialogContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      name: \"body\",\n      type: \"text\",\n      label: \"Reply\",\n      multiline: true,\n      rows: \"3\",\n      placeholder: \"What's up?\",\n      onChange: this.handleChange,\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Submit\", loading && React.createElement(CircularProgress, {\n      size: 30,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\npostResponse.propTypes = {\n  postResponse: PropTypes.func.isRequired,\n  UI: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  UI: state.UI\n});\n\nexport default connect(mapStateToProps, {\n  postResponse\n})(withStyles(styles)(PostScream));","map":{"version":3,"sources":["C:/Users/csamu/Desktop/commentwars/src/components/PostResponse.js"],"names":["React","Component","Fragment","PropTypes","withStyles","Button","TextField","Dialog","DialogContent","DialogTitle","CircularProgress","AddCircleOutlineIcon","CloseIcon","Typography","connect","postResponse","styles","submitButton","position","float","marginTop","progressSpinner","closeButton","left","top","PostScream","state","open","body","errors","handleOpen","setState","handleClose","handleChange","event","target","name","value","handleSubmit","preventDefault","props","componentWillReceiveProps","nextProps","UI","loading","render","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n// MUI Stuff\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n// Redux stuff\r\nimport { connect } from 'react-redux';\r\nimport { postResponse} from '../redux/actions/dataActions';\r\n\r\nconst styles = {\r\n\r\n  submitButton: {\r\n    position: 'relative',\r\n    float: 'right',\r\n    marginTop: 10\r\n  },\r\n  progressSpinner: {\r\n    position: 'absolute'\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    left: '91%',\r\n    top: '6%'\r\n  }\r\n};\r\n\r\nclass PostScream extends Component {\r\n  state = {\r\n    open: false,\r\n    body: '',\r\n    errors: {}\r\n  };\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.UI.errors) {\r\n      this.setState({\r\n        errors: nextProps.UI.errors\r\n      });\r\n    }\r\n    if (!nextProps.UI.errors && !nextProps.UI.loading) {\r\n      this.setState({ body: '', open: false, errors: {} });\r\n    }\r\n  }\r\n\r\n  handleOpen = () => {\r\n    this.setState({ open: true });\r\n  };\r\n  handleClose = () => {\r\n    this.setState({ open: false, errors: {} });\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.postResponse({ body: this.state.body });\r\n  };\r\n\r\n  render() {\r\n    const { errors } = this.state;\r\n    const {UI: { loading }} = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        <Button onClick={this.handleOpen} tip=\"Post a Comment!\">\r\n            <Typography>\r\n                COMMENT\r\n            </Typography>\r\n          <AddCircleOutlineIcon />\r\n        </Button>\r\n        <Dialog\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n          fullWidth\r\n          maxWidth=\"sm\"\r\n        >\r\n          <Button\r\n            tip=\"Close\"\r\n            onClick={this.handleClose}\r\n          >\r\n            <CloseIcon />\r\n          </Button>\r\n          <DialogTitle>Post a new response</DialogTitle>\r\n          <DialogContent>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <TextField\r\n                name=\"body\"\r\n                type=\"text\"\r\n                label=\"Reply\"\r\n                multiline\r\n                rows=\"3\"\r\n                placeholder=\"What's up?\"\r\n                onChange={this.handleChange}\r\n                fullWidth\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={loading}\r\n              >\r\n                Submit\r\n                {loading && (\r\n                  <CircularProgress\r\n                    size={30}\r\n                  />\r\n                )}\r\n              </Button>\r\n            </form>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\npostResponse.propTypes = {\r\n  postResponse: PropTypes.func.isRequired,\r\n  UI: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  UI: state.UI\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { postResponse }\r\n)(withStyles(styles)(PostScream));"]},"metadata":{},"sourceType":"module"}